

*emp 테이블을 생성하는 스크립트를 편하게 저장하고 수행하는 방법

 1. 도스창을 열고 scott 으로 접속한다. 

  $sqlplus  scott/tiger  
  $dir

2.  emp 테이블 생성하는 스크립트를 demo.sql 로 저장한다. 

 SQL>  ed  demo.sql

3.  demo.sql 스크립트를 수행한다. 

 SQL> @demo.sql 

* 암시적 commit  

 1. 정상 종료 (exit)                  
 2. DDL 문 수행 : create, alter , drop, truncate , rename 
 3. DCL 문 수행 :  grant, revoke  

예제:    SQL>  delete  from  emp; 
   
          SQL>  create  table  emp902
                   ( empno   number(10),
                     ename    varchar2(10) );

중요설명:  오라클은 DML 문장을 수행하고서 정상종료 또는 DDL 문 수행
    

	•  081 데이터 저장 및 취소하기(COMMIT, ROLLBACK)

  commit 은 지금까지 변경한 데이터 베이스 작업들(DML 문장) 을 데이터베이스에
  영구히 반영하겠다 라는 TCL (Trasaction Control Language) 문

  rollback 은 지금까지 변경한 데이터 베이스 작업들(DML 문장) 을 취소하는 명령어
  마지막으로 commit 한 이후의 작업한 DML 작업들을 취소한다. 

SQL 의 종류  
   1. Query 문 :  select 문의 6가지절, 조인, 서브쿼리
   2. DML 문   :  insert,  update, delete,  merge 
   3. DDL 문    :  create, alter, drop,  truncate, rename 
   4. DCL 문    :  grant ,  revoke 
   5. TCL 문     :  commit, rollback, savepoint 

                                         
   금융 ,  판교에 게임회사 ,  쇼설 커머스 ,  영어 교육 업체,     하둡(Hive) 
     ↓        ↓                       ↓                ↓                    ↓
  오라클     MSSQL              MySQL           MySQL, Maria    NoSQL(SQL)

예제:    select  count(*)  from  emp;

          delete  from  emp;

          select *  from emp;

          rollback;

         select  count(*)  from emp;

	•  083 락(LOCK) 이해하기

 "특정 창(session) 에 접속한 유져(scott)가 KING 의 월급을 9000 으로 
  변경하고 있는 상태에서 다른 창(session)에 접속한 유져(scott) 가
  KING을 월급을 변경할 수 없도록 막는 기능을 LOCK 이라고 합니다." 

 내가 변경한 데이터를 남이 보려면 내가 commit 해줘야 볼 수 있다.
 내가 commit 하지 않으면 내가 변경한 데이터를 남이 볼 수 없다. 

 update 를 수행하면 update 를 수행하고 있는 행(row) 에  락(lock)을
 건다. 
예:
  update   emp
   set   sal = 8000
   where  ename='KING';  

설명:  위와 같이 update 를 하면 KING 의 전체 행에 락(lock) 을 겁니다.
         다른창(session) 에 접속한 유져가 KING 의 데이터를 절대로 
         갱신할 수 없습니다.

예:       도스창 A                                        도스창 B

          rollback;                                           rollback; 

          update  emp
            set  sal = 8700                             update   emp
          where ename='KING';                         set  deptno = 30
                                                              where  ename='KING';

예제:      도스창 A                                     도스창  B

            commit;                                      commit; 

           update   emp
             set  sal = 9700
          where  ename='JAMES';                   update   emp
                                                              set  sal = 8000
                                                          where ename='ALLEN'; 

설명:   도스창 A 는 JAMES 행에 Lock 을 걸었고  도스창 B 는 ALLEN 의
          행에 LOCK 건거라 서로 충돌 되지 않습니다. 

 오라클에 LOCK 이 있어서  사용자들은 항상 일관된 데이터를 볼 수 있습니다.


	• 084 SELECT FOR UPDATE절 이해하기

  " 보통 lock 은  update 문을 수행할 때 주로 걸리나  select  를 수행할때
    는 lock 이 걸리지 않는데  select 를 수행할 때도 lock 을 걸고 싶으면
     select  for  update 문을 이용하면 됩니다. 
    내가 어떤 데이터를 보고 있는 동안 그 누구도 이 데이터를 갱신하지
    못하도록 막고 싶을때 select  for update 문을 사용합니다. "

예:  코스트코  밤 9시에 문을 닫는데 9시에 매장에 진열된 상품의 갯수를
     파악해서 모자란 상품을 주문해서 채워넣을려고 한다. 

     9시를 기준으로 지금 매장의 상품들의 상품 갯수를 파악하고 싶다.
     항상 10개의 상품이 있어하는 커피제품이 있다면 지금 남은게 3개면
     7개를 주문하려고 한다. 그런데 상품의 갯수가 계속 변경되면 새로
    주문을 넣을 때 혼란스러우므로 9시 현재를 기준으로 그 어떤 데이터도
    갱신하지 못하도록 막아버립니다.

예제:       도스창 A                                      도스창  B

              commit;                                       commit; 

              select ename, sal
                   from  emp
                   where  ename='BLAKE'             update  emp
                   for  udpate;                             set   sal = 0
                                                               where  ename='BLAKE';

	• 085 서브 쿼리를 사용하여 데이터 입력하기
 
  우리가 지금까지 배운 insert 문장은 한번에 한건만 입력할 수 있었습니다.

   insert   into  emp(empno, ename, sal )
                  values(1234,'aaa', 4000 );

  그런데 서브쿼리를 사용한 insert 문장을 이용하면 한번에 여러건의 
  데이터를 입력할 수 있게 됩니다.

  create  table  emp12_backup3
  as
  select  *  
      from emp12;

  select  count(*)  from  emp12_backup3; 

  truncate  table  emp12; 


  insert   into   emp12
  select  *
   from  emp12_backup3;

  commit;

  select  count(*) from  emp12;

314.  dept 테이블을  백업하시오 !

 create  table   dept_backup
 as
  select *
   from  dept; 

315.  dept 테이블을 truncate 하시오 !

 truncate   table  dept; 

316.  dept 테이블을 dept_backup 테이블을 이용해서 복구하시오 !

insert   into  dept
 select  *
   from  dept_backup;

	•  086 서브 쿼리를 사용하여 데이터 수정하기

  update   emp                   <----  서브쿼리 사용가능 
    set  sal = 8900               <----  서브쿼리 사용가능 
    where  ename='SCOTT';    <----  서브쿼리 사용가능 

예제1.  SCOTT 보다 더 많은 월급을 받는 사원들의  직업을 SALESMAN 
 으로 변경하시오 !

 update   emp
   set  job='SALESMAN'
  where   sal  >  (   select   sal
                             from  emp
                             where  ename='SCOTT' );
 
rollback;

317.  ALLEN 보다 더 늦게 입사한 사원들의 커미션을 9000으로 
수정하시오 !

update emp
set comm = 9000
where hiredate > (select hiredate
                         from emp
                         where ename ='ALLEN');

318.  SMITH 와 같은 직업을 갖는 사원들의 월급을 9800으로 
 변경하시오 ! 그런데 SMITH 는 제외하시오 !

update emp
set sal = 9800
where job = (select job
		from emp
		where ename = 'SMITH') 
and ename != 'SMITH';

319.  ALLEN 의 월급을  KING 의 월급으로 변경하시오 !

 update  emp
   set  sal  =  (  select   sal 
                        from  emp
                        where  ename='KING' ) 
   where   ename='ALLEN';

320.   JONES 보다 월급이 많은 사원들의 직업을 MARTIN 의 
 직업으로 변경하시오 !

 update   emp
   set   job =  (select   job
                       from  emp
                       where  ename='MARTIN' )
  where   sal  > ( select  sal
                          from  emp
                          where  ename='JONES' );

	• 087 서브 쿼리를 사용하여 데이터 삭제하기

  예제:   SCOTT 보다 월급을 많이 받는 사원들을 삭제하시오 !

   delete  from  emp
   where   sal > ( select  sal
                       from  emp
                       where ename='SCOTT' ); 

  rollback;

321.  ALLEN 보다 늦게 입사한 사원들을 삭제하시오 !

 delete  from  emp
  where  hiredate > ( select   hiredate
                               from  emp
                               where  ename='ALLEN' );
 rollback;

322.  JONES 와 같은 부서번호에서 일하는 사원들을 삭제하시오 !
 그런데 JONES 는 제외시키시오 !


	•  088 서브 쿼리를 사용하여 데이터 합치기

       "merge 문에 서브쿼리를 사용하기 "

예제1.   부서번호, 부서번호별 토탈월급을 출력하시오 ! (세로출력)

 select  deptno, sum(sal)
  from  emp
 group  by  deptno;

예제2. 부서테이블에 sumsal 이라는 컬럼을 추가하시오 !

  alter  table  dept
    add   sumsal  number(10);

  select  deptno, sumsal
    from  dept;

예제3.  위의  dept 테이블에 추가한 sumsal 컬럼에 해당 부서번호의 
 토탈월급으로 값을 갱신하시오 

 merge  into  dept    d
 using   (  select  deptno,  sum(sal)  토탈
                 from  emp
                 group  by  deptno )    e
 on  (  e.deptno = d.deptno )
 when  matched  then
 update   set   d.sumsal = e.토탈 ;




323.  부서번호, 부서번호별 인원수를 출력하시오 !(세로 출력)

 select  deptno, count(*)  인원수 
  from  emp
  group  by deptno; 

324.  부서테이블에 cnt 라는 컬럼을 추가하시오 !

 alter   table  dept
   add   cnt    number(10);

 select   deptno, cnt
   from  dept; 

325.  지금 dept 테이블에 추가한 cnt 컬럼에 해당 부서번호에 인원수로
값을 갱신하시오 ! 

merge into dept d
using ( select  deptno, count(*)  인원수 
           from  emp
           group  by  deptno )  e
on ( e.deptno = d.deptno )
when matched then
update set d.cnt = e.인원수;

설명:  using 절에 사용한 서브쿼리문의 결과가 마치 테이블처럼 이 merge
        문에서 사용되고 있다. 
